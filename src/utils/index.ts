import {Shift, ShiftCounts, ShiftDataPoint, ShiftMetrics} from "@/types";

export const getStartDate = (summaryPeriod: string, shifts: Shift[]): Date => {

    if (summaryPeriod === 'all' && shifts.length > 0) {
        const dates = shifts.map(s => new Date(s.date));
        return new Date(Math.min(...dates.map(d => d.getTime())));
    }

    const startDate = new Date();
    startDate.setDate(startDate.getDate() - parseInt(summaryPeriod));
    return startDate;
};

export const getFilteredShifts = (shifts: Shift[], summaryPeriod: string): Shift[] => {
    const currentDate = new Date();
    const startDate = getStartDate(summaryPeriod, shifts);

    return shifts.filter(shift => {
        const shiftDate = new Date(shift.date);
        return shiftDate >= startDate && shiftDate <= currentDate;
    });
};

export const countShiftTypes = (shifts: Shift[]): ShiftCounts => {
    const initialCounts: ShiftCounts = {
        '‡πÄ‡∏ß‡∏£‡πÄ‡∏ä‡πâ‡∏≤': 0,
        '‡πÄ‡∏ß‡∏£‡∏ö‡πà‡∏≤‡∏¢': 0,
        '‡πÄ‡∏ß‡∏£‡∏î‡∏∂‡∏Å': 0,
        '‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î': 0,
        '‡∏ß‡∏±‡∏ô‡∏•‡∏≤': 0
    };

    return shifts.reduce((acc, shift) => {
        if (Object.prototype.hasOwnProperty.call(acc, shift.shift)) {
            acc[shift.shift]++;
        }
        return acc;
    }, initialCounts);
};

export const prepareChartData = (shiftCounts: ShiftCounts): ShiftDataPoint[] => {
    return Object.entries(shiftCounts)
        .filter(([shift]) => shift !== '') // ‡∏Å‡∏£‡∏≠‡∏á‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á‡∏≠‡∏≠‡∏Å
        .map(([shift, count]) => ({
            name: shift,
            count,
            value: count // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö PieChart
        }));
};

export const calculateWorkLifeBalance = (shifts: Shift[], startDate: Date, endDate: Date): number => {
    if (shifts.length === 0) return 0;

    const totalDays = Math.ceil((endDate.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24));
    const workDays = shifts.filter(shift =>
        shift.shift !== '‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î' && shift.shift !== '‡∏ß‡∏±‡∏ô‡∏•‡∏≤'
    ).length;

    return Math.round(((totalDays - workDays) / totalDays) * 100);
};

export const calculateConsecutiveWorkDays = (shifts: Shift[]): number => {
    if (shifts.length === 0) return 0;

    let maxConsecutive = 0;
    let currentConsecutive = 0;
    let previousDate: Date | null = null;

    const sortedShifts = [...shifts].sort((a, b) =>
        new Date(a.date).getTime() - new Date(b.date).getTime()
    );

    sortedShifts.forEach(shift => {
        const currentDate = new Date(shift.date);

        if (shift.shift !== '‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î' && shift.shift !== '‡∏ß‡∏±‡∏ô‡∏•‡∏≤') {
            if (previousDate) {
                const diffDays = Math.ceil(
                    (currentDate.getTime() - previousDate.getTime()) / (1000 * 60 * 60 * 24)
                );
                if (diffDays === 1) {
                    currentConsecutive++;
                } else {
                    currentConsecutive = 1;
                }
            } else {
                currentConsecutive = 1;
            }
            maxConsecutive = Math.max(maxConsecutive, currentConsecutive);
            previousDate = currentDate;
        } else {
            currentConsecutive = 0;
            previousDate = null;
        }
    });

    return maxConsecutive;
};

export const countAfternoonToMorning = (shifts: Shift[]): number => {
    if (shifts.length === 0) return 0;

    let count = 0;
    const sortedShifts = [...shifts].sort((a, b) =>
        new Date(a.date).getTime() - new Date(b.date).getTime()
    );

    for (let i = 0; i < sortedShifts.length - 1; i++) {
        if (sortedShifts[i].shift === '‡πÄ‡∏ß‡∏£‡∏ö‡πà‡∏≤‡∏¢' &&
            sortedShifts[i + 1].shift === '‡πÄ‡∏ß‡∏£‡πÄ‡∏ä‡πâ‡∏≤') {
            count++;
        }
    }
    return count;
};


export const getEmpathyMessages = (metrics: ShiftMetrics, periodText: string): string[] => {
    const messages: string[] = [];

    if (metrics.afternoonToMorningCount > 0) {
        messages.push(
            `${periodText} ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏ß‡∏£‡∏ö‡πà‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡πÄ‡∏ä‡πâ‡∏≤‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß ${metrics.afternoonToMorningCount} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏ô‡∏∞‡∏Ñ‡∏∞ üòä`
        );
    }

    if (metrics.nightShiftCount > metrics.totalShifts * 0.3) {
        messages.push(
            '‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏ß‡∏£‡∏î‡∏∂‡∏Å‡∏Ñ‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏ö‡πà‡∏≠‡∏¢ ‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏°‡∏î‡∏π‡πÅ‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏ß‡∏¢‡∏ô‡∏∞‡∏Ñ‡∏∞ üí™'
        );
    }

    if (metrics.consecutiveWorkDays > 7) {
        messages.push(
            `‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ô‡∏ñ‡∏∂‡∏á ${metrics.consecutiveWorkDays} ‡∏ß‡∏±‡∏ô ‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏ô‡∏∞‡∏Ñ‡∏∞ üò¥`
        );
    }

    if (metrics.workLifeBalance < 20) {
        messages.push(
            `‡∏™‡∏°‡∏î‡∏∏‡∏•‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏ï‡πà‡∏≥ (${metrics.workLifeBalance}%) ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô‡∏ô‡∏∞‡∏Ñ‡∏∞ üèñÔ∏è`
        );
    }

    if (messages.length === 0) {
        messages.push('‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏´‡∏ô‡∏±‡∏Å ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏Æ‡∏µ‡πÇ‡∏£‡πà‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤! ü¶∏‚Äç‚ôÄÔ∏è');
    }

    return messages;
};

export const getBadgeMessage = (metrics: ShiftMetrics, totalDays: number): string => {
    // ‡∏ñ‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏•‡∏≤‡∏á‡πÜ
    if (totalDays <= 7) {
        if (metrics.totalShifts === 0) {
            return "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏£";
        }
        return "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏£";
    }

    if (totalDays <= 14) {
        return "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•";
    }

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á‡∏Ç‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå
    const issues: { severity: number; message: string }[] = [];

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Work-Life Balance
    if (metrics.workLifeBalance < 20) {
        issues.push({
            severity: 3,
            message: "‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô"
        });
    } else if (metrics.workLifeBalance < 30) {
        issues.push({
            severity: 2,
            message: "‡∏Ñ‡∏ß‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô"
        });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á
    if (metrics.consecutiveWorkDays > 10) {
        issues.push({
            severity: 3,
            message: "‡∏Ñ‡∏ß‡∏£‡∏´‡∏¢‡∏∏‡∏î‡∏û‡∏±‡∏Å‡πÇ‡∏î‡∏¢‡πÄ‡∏£‡πá‡∏ß"
        });
    } else if (metrics.consecutiveWorkDays > 7) {
        issues.push({
            severity: 2,
            message: "‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏ô‡∏≤‡∏ô"
        });
    } else if (metrics.consecutiveWorkDays > 5) {
        issues.push({
            severity: 1,
            message: "‡πÉ‡∏Å‡∏•‡πâ‡∏ñ‡∏∂‡∏á‡∏Ç‡∏µ‡∏î‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á"
        });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ß‡∏£‡∏ö‡πà‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡πÄ‡∏ä‡πâ‡∏≤
    if (metrics.afternoonToMorningCount > 2) {
        issues.push({
            severity: 3,
            message: "‡πÄ‡∏ß‡∏£‡∏ö‡πà‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡πÄ‡∏ä‡πâ‡∏≤‡∏ö‡πà‡∏≠‡∏¢‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ"
        });
    } else if (metrics.afternoonToMorningCount > 0) {
        issues.push({
            severity: 2,
            message: "‡∏°‡∏µ‡πÄ‡∏ß‡∏£‡∏ö‡πà‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡πÄ‡∏ä‡πâ‡∏≤"
        });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ß‡∏£‡∏î‡∏∂‡∏Å
    if (metrics.totalShifts > 0) {  // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô division by zero
        const nightShiftPercentage = (metrics.nightShiftCount / metrics.totalShifts) * 100;
        if (nightShiftPercentage > 40) {
            issues.push({
                severity: 3,
                message: "‡πÄ‡∏ß‡∏£‡∏î‡∏∂‡∏Å‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ"
            });
        } else if (nightShiftPercentage > 30) {
            issues.push({
                severity: 2,
                message: "‡πÄ‡∏ß‡∏£‡∏î‡∏∂‡∏Å‡∏Ñ‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏°‡∏≤‡∏Å"
            });
        }
    }

    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏î‡πÜ
    if (issues.length === 0) {
        if (metrics.workLifeBalance > 40) {
            return "‡∏™‡∏°‡∏î‡∏∏‡∏•‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏î‡∏µ‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°";
        }
        if (metrics.workLifeBalance > 30) {
            return "‡∏™‡∏°‡∏î‡∏∏‡∏•‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏î‡∏µ";
        }
        return "‡∏™‡∏°‡∏î‡∏∏‡∏•‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏õ‡∏Å‡∏ï‡∏¥";
    }

    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ï‡∏≤‡∏° severity ‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
    issues.sort((a, b) => b.severity - a.severity);
    return issues[0].message;
};